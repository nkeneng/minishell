/core/minishell$ echo "hello" >test.txt
/core/minishell$ cat test
testfiles/ tests/     test.txt   
/core/minishell$ cat test.txt > output | grep -i helo output
/core/minishell$ cat test.txt > output | grep -i hello output
hello
/core/minishell$ cat test.txt > output | grep -i hello
/core/minishell$ cat test.txt > output | cat
/core/minishell$ echo $?
0
/core/minishell$ cat test.txt > output | grep -i hello
/core/minishell$ echo $?
1
/core/minishell$ echo "$(cat "$(ls -l)")"
pipe after file: seperate command execution
/core/minishell$ cat /dev/urandom > outfile | sleep 2
^C
/core/minishell$ cat /dev/urandom | sleep 2
pipe after > stdout writes into pipe and uses pipe
same as cat /dev/urandom | sleep 2
l/core/minishell$ head -1 <(cat /dev/urandom)
��*{cmfɍ�C��d��6��M�5�e�^�
�� $,�
/core/minishell$ cat /dev/urandom | head -1
1meubrin@c3a4c2:~/core/minishell$ cat /dev/urandom > /dev/stdout | sleep 2

#examples
    Command substitution with multiple levels and redirections:

bash
echo "Files: $(ls -l $(find . -type d -name "test*") 2>/dev/null | wc -l) in $(pwd)"

    Pipelines with multiple commands and redirections:

bash
cat /etc/passwd | grep sh$ | cut -d: -f1 | sort | uniq > users.txt | wc -l

    Process substitution and redirection:

bash
diff <(ls -l /etc) <(ssh remote_host ls -l /etc) > differences.txt

    Command grouping with subshells and redirections:

bash
(cd /tmp && tar czf - *) | (cd /backup && tar xzf -) > /dev/null 2>&1

    Here-document (heredoc) with command substitution:

bash
cat << EOF > script.sh
#!/bin/bash
echo "Current date: $(date)"
echo "Files in home: $(ls ~ | wc -l)"
EOF

    Multiple commands with different exit statuses:

bash
false && echo "This won't print" || echo "But this will" && true | echo "And this too"

    Variable expansion with default values and command substitution:

bash
echo "Hello, ${NAME:-$(whoami)}! Today is $(date +'%A')"

    Combining input/output redirection with pipes:

bash
grep ERROR /var/log/syslog | tee >(wc -l > error_count.txt) | sed 's/ERROR/CRITICAL/' > filtered_errors.log

    Using backquotes for command substitution (older style):

bash
echo "The kernel version is `uname -r` on `hostname`"

    Complex case statement with pattern matching:

bash
case "$1" in
    *.tar.gz|*.tgz) tar xzf "$1" ;;
    *.bz2) bunzip2 "$1" ;;
    *.zip) unzip "$1" ;;
    *) echo "Unknown file type: $1" ;;
esac

some weird things are happening when test2 doesn't exist when followed by too many args
/core/minishell$ echo hello>test.txt | echo testing > test2 this not | echo hmm < test2 |cat >b>c<test.txt
bash: test2: No such file or directory
/core/minishell$ echo hello>test.txt | echo testing > test2 | echo hmm < test2 |cat >b>c<test.txt
/core/minishell$ echo hello>test.txt | echo testing > test2 here not | echo hmm < test2 |cat >b>c<test.txt

VAR="hello  spaces are kept"
VAR='hello  spaces are kept'

quotes work anywhere, if the thing after quotes are gone is valid
ls -l > "/dev/stdout"

SHELL VARIABLES ASSIGNMENT
variable can only contain alphanum and _
lmeubrin@c3a1c1:~$ 'spaces here'='fd'
spaces here=fd: command not found
lmeubrin@c3a1c1:~$ 'spaceshere'='fd'
spaceshere=fd: command not found
lmeubrin@c3a1c1:~$ har%=fd
har%=fd: command not found

For array assignments or compound structures, you might see parentheses:
bash
ARR=(item1 item2 "item with spaces")

You can use command substitution within double quotes:

bash
DATE="Current date: $(date)"

When assigning without quotes, Bash performs word splitting and wildcard expansion
Double quotes allow for variable interpolation and command substitution within the assignment

ls -l|var="fd"
/core/minishell$ echo $var

no output,
but 
ls -l||var="fd"
ls -l&&var="fd"
assign the variable

ASSIGNMENTS
export PATH=$PATH:/new/path


lmeubrin@c4c3c2:~$ command="<<EOF|grep 'cat'"
lmeubrin@c4c3c2:~$ $command 
<<EOF|grep: command not found
lmeubrin@c4c3c2:~$ command="<< EOF | grep 'cat'"
lmeubrin@c4c3c2:~$ $command 
<<: command not found
lmeubrin@c4c3c2:~$ command="cat << EOF | grep 'cat'"
lmeubrin@c4c3c2:~$ $command 
cat: '<<': No such file or directory
cat: EOF: No such file or directory
cat: '|': No such file or directory
cat: grep: No such file or directory
cat: "'cat'": No such file or directory

expands and tokenizes and executes
lmeubrin@c4c3c2:~$ command="echo hello     there"
lmeubrin@c4c3c2:~$ $command
hello there

after expansion, the element expects all things to belong to the first word, and that word might be a command, the rest is split and saved in an array as arguments.
lmeubrin@c4c3c2:~$ command='echo "hello    $USER" |grep "hello"'
lmeubrin@c4c3c2:~$ $command                      
"hello $USER" |grep "hello"

QUOTES BEHAVIOUR
lmeubrin@c3a1c1:~$ export VAR="$HOME love 'come $HOME'"
lmeubrin@c3a1c1:~$ echo $VAR
/home/lmeubrin love 'come /home/lmeubrin'

single quotes inside double quotes don't do anything!!


RETURNS
bash
NULL string returns 0
""
echo $?
0

empty strings return 0
bash
$unnassigned_variable
echo $?
0

export var=3 | echo $var

var is unset!!!

REDIRECTIONS
command <<EOL >output 2>/dev/null

cat | cat | cat | ls
cat | cat |ls

cat | cat

variable called SHLVL.
if you call the shell in the shell, it increases. if you set it to 1000000 it says shell level too high, resetting to 1, and it resets the variable to 1

bash sets variables to env if its the first thing and no command follows!! if it is part of a command, it is not set to env and it is not in a child Process
(not even as the last command in a pipe!!!!)
it does get set, if the only thing that follows is something that expands to an empty string. So it has to be followed by NOTHING
lmeubrin@c4b8c2:~$ var=ls $var
lmeubrin@c4b8c2:~$ var=8 echo $var
ls

empty environment: executables should still be finddable by parsing /etc/passwd
env -i ./minishell

bash behaviour:
creates file if not there, content of file gets deletd if file exists.
therefore probable: open before read?
"<out cat >>out"
This segfaults for us as well. it shouldnt
isntead bash: error output from cat:
"<out cat >>out"
cat: -: input file is output file

testing signals and interrupts
sleep 10 <<eof

lmeubrin@c3a1c6:~/core/minishell$ ./libft
bash: ./libft: Is a directory
lmeubrin@c3a1c6:~/core/minishell$ echo $?
126

〘🐚〙: ^C
〘🐚〙: cat <<rt
sdsd
sdsd
rt
rt
rt
rt

echo "cat lol.c | cat >lol.c " jfkd"   "fjd" "

check permissions:
echo hello | ""

valgrind stuff
echo "jf"kdkd"$hi"'fjf''$hi' | dfjkd "fdkj"fj"$hi" | fjkfd<444

   
			
echo "     "           "hello"        "   "
echo """"$USER""""
echo """""$USER"""""
echo is this $hi"a true hi""should expand $hi"
echo is this $hi'a true hi'"should expand $hi"
echo is this $hi "should expand $USER" 'should not expand $USER'
echo $hi $hi $hi
echo $hi + $hi
e"cho" this is working
echo nospace:"1""2""3"
""echo
e"cho"
